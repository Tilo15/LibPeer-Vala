/* peer.h generated by valac 0.48.13, the Vala compiler, do not modify */

#ifndef __PEER_H__
#define __PEER_H__

#include <glib-object.h>
#include <glib.h>
#include <gio/gio.h>
#include <stdlib.h>
#include <string.h>

G_BEGIN_DECLS

#define LIB_PEER_NETWORKS_TYPE_ADVERTISEMENT (lib_peer_networks_advertisement_get_type ())
#define LIB_PEER_NETWORKS_ADVERTISEMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), LIB_PEER_NETWORKS_TYPE_ADVERTISEMENT, LibPeerNetworksAdvertisement))
#define LIB_PEER_NETWORKS_ADVERTISEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), LIB_PEER_NETWORKS_TYPE_ADVERTISEMENT, LibPeerNetworksAdvertisementClass))
#define LIB_PEER_NETWORKS_IS_ADVERTISEMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), LIB_PEER_NETWORKS_TYPE_ADVERTISEMENT))
#define LIB_PEER_NETWORKS_IS_ADVERTISEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), LIB_PEER_NETWORKS_TYPE_ADVERTISEMENT))
#define LIB_PEER_NETWORKS_ADVERTISEMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), LIB_PEER_NETWORKS_TYPE_ADVERTISEMENT, LibPeerNetworksAdvertisementClass))

typedef struct _LibPeerNetworksAdvertisement LibPeerNetworksAdvertisement;
typedef struct _LibPeerNetworksAdvertisementClass LibPeerNetworksAdvertisementClass;
typedef struct _LibPeerNetworksAdvertisementPrivate LibPeerNetworksAdvertisementPrivate;

#define LIB_PEER_PROTOCOLS_MX2_TYPE_INSTANCE_REFERENCE (lib_peer_protocols_mx2_instance_reference_get_type ())
#define LIB_PEER_PROTOCOLS_MX2_INSTANCE_REFERENCE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), LIB_PEER_PROTOCOLS_MX2_TYPE_INSTANCE_REFERENCE, LibPeerProtocolsMx2InstanceReference))
#define LIB_PEER_PROTOCOLS_MX2_INSTANCE_REFERENCE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), LIB_PEER_PROTOCOLS_MX2_TYPE_INSTANCE_REFERENCE, LibPeerProtocolsMx2InstanceReferenceClass))
#define LIB_PEER_PROTOCOLS_MX2_IS_INSTANCE_REFERENCE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), LIB_PEER_PROTOCOLS_MX2_TYPE_INSTANCE_REFERENCE))
#define LIB_PEER_PROTOCOLS_MX2_IS_INSTANCE_REFERENCE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), LIB_PEER_PROTOCOLS_MX2_TYPE_INSTANCE_REFERENCE))
#define LIB_PEER_PROTOCOLS_MX2_INSTANCE_REFERENCE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), LIB_PEER_PROTOCOLS_MX2_TYPE_INSTANCE_REFERENCE, LibPeerProtocolsMx2InstanceReferenceClass))

typedef struct _LibPeerProtocolsMx2InstanceReference LibPeerProtocolsMx2InstanceReference;
typedef struct _LibPeerProtocolsMx2InstanceReferenceClass LibPeerProtocolsMx2InstanceReferenceClass;

#define LIB_PEER_NETWORKS_TYPE_PEER_INFO (lib_peer_networks_peer_info_get_type ())
#define LIB_PEER_NETWORKS_PEER_INFO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), LIB_PEER_NETWORKS_TYPE_PEER_INFO, LibPeerNetworksPeerInfo))
#define LIB_PEER_NETWORKS_PEER_INFO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), LIB_PEER_NETWORKS_TYPE_PEER_INFO, LibPeerNetworksPeerInfoClass))
#define LIB_PEER_NETWORKS_IS_PEER_INFO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), LIB_PEER_NETWORKS_TYPE_PEER_INFO))
#define LIB_PEER_NETWORKS_IS_PEER_INFO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), LIB_PEER_NETWORKS_TYPE_PEER_INFO))
#define LIB_PEER_NETWORKS_PEER_INFO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), LIB_PEER_NETWORKS_TYPE_PEER_INFO, LibPeerNetworksPeerInfoClass))

typedef struct _LibPeerNetworksPeerInfo LibPeerNetworksPeerInfo;
typedef struct _LibPeerNetworksPeerInfoClass LibPeerNetworksPeerInfoClass;

#define LIB_PEER_NETWORKS_TYPE_NETWORK (lib_peer_networks_network_get_type ())
#define LIB_PEER_NETWORKS_NETWORK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), LIB_PEER_NETWORKS_TYPE_NETWORK, LibPeerNetworksNetwork))
#define LIB_PEER_NETWORKS_NETWORK_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), LIB_PEER_NETWORKS_TYPE_NETWORK, LibPeerNetworksNetworkClass))
#define LIB_PEER_NETWORKS_IS_NETWORK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), LIB_PEER_NETWORKS_TYPE_NETWORK))
#define LIB_PEER_NETWORKS_IS_NETWORK_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), LIB_PEER_NETWORKS_TYPE_NETWORK))
#define LIB_PEER_NETWORKS_NETWORK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), LIB_PEER_NETWORKS_TYPE_NETWORK, LibPeerNetworksNetworkClass))

typedef struct _LibPeerNetworksNetwork LibPeerNetworksNetwork;
typedef struct _LibPeerNetworksNetworkClass LibPeerNetworksNetworkClass;
typedef struct _LibPeerNetworksNetworkPrivate LibPeerNetworksNetworkPrivate;
typedef struct _LibPeerNetworksPeerInfoPrivate LibPeerNetworksPeerInfoPrivate;

#define LIB_PEER_NETWORKS_TYPE_UNKNOWN_PEER_INFO (lib_peer_networks_unknown_peer_info_get_type ())
#define LIB_PEER_NETWORKS_UNKNOWN_PEER_INFO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), LIB_PEER_NETWORKS_TYPE_UNKNOWN_PEER_INFO, LibPeerNetworksUnknownPeerInfo))
#define LIB_PEER_NETWORKS_UNKNOWN_PEER_INFO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), LIB_PEER_NETWORKS_TYPE_UNKNOWN_PEER_INFO, LibPeerNetworksUnknownPeerInfoClass))
#define LIB_PEER_NETWORKS_IS_UNKNOWN_PEER_INFO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), LIB_PEER_NETWORKS_TYPE_UNKNOWN_PEER_INFO))
#define LIB_PEER_NETWORKS_IS_UNKNOWN_PEER_INFO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), LIB_PEER_NETWORKS_TYPE_UNKNOWN_PEER_INFO))
#define LIB_PEER_NETWORKS_UNKNOWN_PEER_INFO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), LIB_PEER_NETWORKS_TYPE_UNKNOWN_PEER_INFO, LibPeerNetworksUnknownPeerInfoClass))

typedef struct _LibPeerNetworksUnknownPeerInfo LibPeerNetworksUnknownPeerInfo;
typedef struct _LibPeerNetworksUnknownPeerInfoClass LibPeerNetworksUnknownPeerInfoClass;
typedef struct _LibPeerNetworksUnknownPeerInfoPrivate LibPeerNetworksUnknownPeerInfoPrivate;

#define LIB_PEER_NETWORKS_TYPE_RECEIPTION (lib_peer_networks_receiption_get_type ())
#define LIB_PEER_NETWORKS_RECEIPTION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), LIB_PEER_NETWORKS_TYPE_RECEIPTION, LibPeerNetworksReceiption))
#define LIB_PEER_NETWORKS_RECEIPTION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), LIB_PEER_NETWORKS_TYPE_RECEIPTION, LibPeerNetworksReceiptionClass))
#define LIB_PEER_NETWORKS_IS_RECEIPTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), LIB_PEER_NETWORKS_TYPE_RECEIPTION))
#define LIB_PEER_NETWORKS_IS_RECEIPTION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), LIB_PEER_NETWORKS_TYPE_RECEIPTION))
#define LIB_PEER_NETWORKS_RECEIPTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), LIB_PEER_NETWORKS_TYPE_RECEIPTION, LibPeerNetworksReceiptionClass))

typedef struct _LibPeerNetworksReceiption LibPeerNetworksReceiption;
typedef struct _LibPeerNetworksReceiptionClass LibPeerNetworksReceiptionClass;
typedef struct _LibPeerNetworksReceiptionPrivate LibPeerNetworksReceiptionPrivate;
typedef struct _LibPeerProtocolsMx2InstanceReferencePrivate LibPeerProtocolsMx2InstanceReferencePrivate;
typedef enum  {
	LIB_PEER_UTIL_QUEUE_CONTROL_Payload,
	LIB_PEER_UTIL_QUEUE_CONTROL_Stop
} LibPeerUtilQueueControl;

#define LIB_PEER_UTIL_TYPE_QUEUE_CONTROL (lib_peer_util_queue_control_get_type ())

#define LIB_PEER_UTIL_TYPE_QUEUE_COMMAND (lib_peer_util_queue_command_get_type ())
#define LIB_PEER_UTIL_QUEUE_COMMAND(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), LIB_PEER_UTIL_TYPE_QUEUE_COMMAND, LibPeerUtilQueueCommand))
#define LIB_PEER_UTIL_QUEUE_COMMAND_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), LIB_PEER_UTIL_TYPE_QUEUE_COMMAND, LibPeerUtilQueueCommandClass))
#define LIB_PEER_UTIL_IS_QUEUE_COMMAND(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), LIB_PEER_UTIL_TYPE_QUEUE_COMMAND))
#define LIB_PEER_UTIL_IS_QUEUE_COMMAND_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), LIB_PEER_UTIL_TYPE_QUEUE_COMMAND))
#define LIB_PEER_UTIL_QUEUE_COMMAND_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), LIB_PEER_UTIL_TYPE_QUEUE_COMMAND, LibPeerUtilQueueCommandClass))

typedef struct _LibPeerUtilQueueCommand LibPeerUtilQueueCommand;
typedef struct _LibPeerUtilQueueCommandClass LibPeerUtilQueueCommandClass;
typedef struct _LibPeerUtilQueueCommandPrivate LibPeerUtilQueueCommandPrivate;

struct _LibPeerNetworksAdvertisement {
	GTypeInstance parent_instance;
	volatile int ref_count;
	LibPeerNetworksAdvertisementPrivate * priv;
	LibPeerProtocolsMx2InstanceReference* instance_reference;
	LibPeerNetworksPeerInfo* peer_info;
};

struct _LibPeerNetworksAdvertisementClass {
	GTypeClass parent_class;
	void (*finalize) (LibPeerNetworksAdvertisement *self);
};

struct _LibPeerNetworksNetwork {
	GTypeInstance parent_instance;
	volatile int ref_count;
	LibPeerNetworksNetworkPrivate * priv;
};

struct _LibPeerNetworksNetworkClass {
	GTypeClass parent_class;
	void (*finalize) (LibPeerNetworksNetwork *self);
	GBytes* (*get_network_identifier) (LibPeerNetworksNetwork* self);
	void (*bring_up) (LibPeerNetworksNetwork* self, GError** error);
	void (*bring_down) (LibPeerNetworksNetwork* self, GError** error);
	void (*advertise) (LibPeerNetworksNetwork* self, LibPeerProtocolsMx2InstanceReference* instance_reference, GError** error);
	void (*send) (LibPeerNetworksNetwork* self, GBytes* bytes, LibPeerNetworksPeerInfo* peer_info, GError** error);
};

struct _LibPeerNetworksPeerInfo {
	GTypeInstance parent_instance;
	volatile int ref_count;
	LibPeerNetworksPeerInfoPrivate * priv;
};

struct _LibPeerNetworksPeerInfoClass {
	GTypeClass parent_class;
	void (*finalize) (LibPeerNetworksPeerInfo *self);
	void (*build) (LibPeerNetworksPeerInfo* self, guint8 data_length, GInputStream* stream, GError** error);
	GBytes* (*get_network_identifier) (LibPeerNetworksPeerInfo* self);
	GBytes* (*get_data_segment) (LibPeerNetworksPeerInfo* self);
	gchar* (*to_string) (LibPeerNetworksPeerInfo* self);
	gboolean (*equals) (LibPeerNetworksPeerInfo* self, LibPeerNetworksPeerInfo* other);
	guint (*hash) (LibPeerNetworksPeerInfo* self);
};

struct _LibPeerNetworksUnknownPeerInfo {
	LibPeerNetworksPeerInfo parent_instance;
	LibPeerNetworksUnknownPeerInfoPrivate * priv;
};

struct _LibPeerNetworksUnknownPeerInfoClass {
	LibPeerNetworksPeerInfoClass parent_class;
};

struct _LibPeerNetworksReceiption {
	GTypeInstance parent_instance;
	volatile int ref_count;
	LibPeerNetworksReceiptionPrivate * priv;
	GInputStream* stream;
	LibPeerNetworksPeerInfo* peer_info;
	LibPeerNetworksNetwork* network;
};

struct _LibPeerNetworksReceiptionClass {
	GTypeClass parent_class;
	void (*finalize) (LibPeerNetworksReceiption *self);
};

struct _LibPeerProtocolsMx2InstanceReference {
	GTypeInstance parent_instance;
	volatile int ref_count;
	LibPeerProtocolsMx2InstanceReferencePrivate * priv;
	guint8* verification_key;
	gint verification_key_length1;
	guint8* public_key;
	gint public_key_length1;
};

struct _LibPeerProtocolsMx2InstanceReferenceClass {
	GTypeClass parent_class;
	void (*finalize) (LibPeerProtocolsMx2InstanceReference *self);
};

struct _LibPeerUtilQueueCommand {
	GTypeInstance parent_instance;
	volatile int ref_count;
	LibPeerUtilQueueCommandPrivate * priv;
	gpointer payload;
	LibPeerUtilQueueControl command;
};

struct _LibPeerUtilQueueCommandClass {
	GTypeClass parent_class;
	void (*finalize) (LibPeerUtilQueueCommand *self);
};

gpointer lib_peer_networks_advertisement_ref (gpointer instance);
void lib_peer_networks_advertisement_unref (gpointer instance);
GParamSpec* lib_peer_networks_param_spec_advertisement (const gchar* name,
                                                        const gchar* nick,
                                                        const gchar* blurb,
                                                        GType object_type,
                                                        GParamFlags flags);
void lib_peer_networks_value_set_advertisement (GValue* value,
                                                gpointer v_object);
void lib_peer_networks_value_take_advertisement (GValue* value,
                                                 gpointer v_object);
gpointer lib_peer_networks_value_get_advertisement (const GValue* value);
GType lib_peer_networks_advertisement_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (LibPeerNetworksAdvertisement, lib_peer_networks_advertisement_unref)
gpointer lib_peer_protocols_mx2_instance_reference_ref (gpointer instance);
void lib_peer_protocols_mx2_instance_reference_unref (gpointer instance);
GParamSpec* lib_peer_protocols_mx2_param_spec_instance_reference (const gchar* name,
                                                                  const gchar* nick,
                                                                  const gchar* blurb,
                                                                  GType object_type,
                                                                  GParamFlags flags);
void lib_peer_protocols_mx2_value_set_instance_reference (GValue* value,
                                                          gpointer v_object);
void lib_peer_protocols_mx2_value_take_instance_reference (GValue* value,
                                                           gpointer v_object);
gpointer lib_peer_protocols_mx2_value_get_instance_reference (const GValue* value);
GType lib_peer_protocols_mx2_instance_reference_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (LibPeerProtocolsMx2InstanceReference, lib_peer_protocols_mx2_instance_reference_unref)
gpointer lib_peer_networks_peer_info_ref (gpointer instance);
void lib_peer_networks_peer_info_unref (gpointer instance);
GParamSpec* lib_peer_networks_param_spec_peer_info (const gchar* name,
                                                    const gchar* nick,
                                                    const gchar* blurb,
                                                    GType object_type,
                                                    GParamFlags flags);
void lib_peer_networks_value_set_peer_info (GValue* value,
                                            gpointer v_object);
void lib_peer_networks_value_take_peer_info (GValue* value,
                                             gpointer v_object);
gpointer lib_peer_networks_value_get_peer_info (const GValue* value);
GType lib_peer_networks_peer_info_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (LibPeerNetworksPeerInfo, lib_peer_networks_peer_info_unref)
LibPeerNetworksAdvertisement* lib_peer_networks_advertisement_new (LibPeerProtocolsMx2InstanceReference* instance_reference,
                                                                   LibPeerNetworksPeerInfo* peer_info);
LibPeerNetworksAdvertisement* lib_peer_networks_advertisement_construct (GType object_type,
                                                                         LibPeerProtocolsMx2InstanceReference* instance_reference,
                                                                         LibPeerNetworksPeerInfo* peer_info);
gpointer lib_peer_networks_network_ref (gpointer instance);
void lib_peer_networks_network_unref (gpointer instance);
GParamSpec* lib_peer_networks_param_spec_network (const gchar* name,
                                                  const gchar* nick,
                                                  const gchar* blurb,
                                                  GType object_type,
                                                  GParamFlags flags);
void lib_peer_networks_value_set_network (GValue* value,
                                          gpointer v_object);
void lib_peer_networks_value_take_network (GValue* value,
                                           gpointer v_object);
gpointer lib_peer_networks_value_get_network (const GValue* value);
GType lib_peer_networks_network_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (LibPeerNetworksNetwork, lib_peer_networks_network_unref)
GBytes* lib_peer_networks_network_get_network_identifier (LibPeerNetworksNetwork* self);
void lib_peer_networks_network_bring_up (LibPeerNetworksNetwork* self,
                                         GError** error);
void lib_peer_networks_network_bring_down (LibPeerNetworksNetwork* self,
                                           GError** error);
void lib_peer_networks_network_advertise (LibPeerNetworksNetwork* self,
                                          LibPeerProtocolsMx2InstanceReference* instance_reference,
                                          GError** error);
void lib_peer_networks_network_send (LibPeerNetworksNetwork* self,
                                     GBytes* bytes,
                                     LibPeerNetworksPeerInfo* peer_info,
                                     GError** error);
LibPeerNetworksNetwork* lib_peer_networks_network_construct (GType object_type);
void lib_peer_networks_peer_info_build (LibPeerNetworksPeerInfo* self,
                                        guint8 data_length,
                                        GInputStream* stream,
                                        GError** error);
GBytes* lib_peer_networks_peer_info_get_network_identifier (LibPeerNetworksPeerInfo* self);
GBytes* lib_peer_networks_peer_info_get_data_segment (LibPeerNetworksPeerInfo* self);
gchar* lib_peer_networks_peer_info_to_string (LibPeerNetworksPeerInfo* self);
gboolean lib_peer_networks_peer_info_equals (LibPeerNetworksPeerInfo* self,
                                             LibPeerNetworksPeerInfo* other);
guint lib_peer_networks_peer_info_hash (LibPeerNetworksPeerInfo* self);
void lib_peer_networks_peer_info_serialise (LibPeerNetworksPeerInfo* self,
                                            GOutputStream* stream,
                                            GError** error);
LibPeerNetworksPeerInfo* lib_peer_networks_peer_info_deserialise (GInputStream* stream,
                                                                  GError** error);
LibPeerNetworksPeerInfo* lib_peer_networks_peer_info_construct (GType object_type);
GType lib_peer_networks_unknown_peer_info_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (LibPeerNetworksUnknownPeerInfo, lib_peer_networks_peer_info_unref)
LibPeerNetworksUnknownPeerInfo* lib_peer_networks_unknown_peer_info_new (void);
LibPeerNetworksUnknownPeerInfo* lib_peer_networks_unknown_peer_info_construct (GType object_type);
gpointer lib_peer_networks_receiption_ref (gpointer instance);
void lib_peer_networks_receiption_unref (gpointer instance);
GParamSpec* lib_peer_networks_param_spec_receiption (const gchar* name,
                                                     const gchar* nick,
                                                     const gchar* blurb,
                                                     GType object_type,
                                                     GParamFlags flags);
void lib_peer_networks_value_set_receiption (GValue* value,
                                             gpointer v_object);
void lib_peer_networks_value_take_receiption (GValue* value,
                                              gpointer v_object);
gpointer lib_peer_networks_value_get_receiption (const GValue* value);
GType lib_peer_networks_receiption_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (LibPeerNetworksReceiption, lib_peer_networks_receiption_unref)
LibPeerNetworksReceiption* lib_peer_networks_receiption_new (GInputStream* stream,
                                                             LibPeerNetworksPeerInfo* info,
                                                             LibPeerNetworksNetwork* network);
LibPeerNetworksReceiption* lib_peer_networks_receiption_construct (GType object_type,
                                                                   GInputStream* stream,
                                                                   LibPeerNetworksPeerInfo* info,
                                                                   LibPeerNetworksNetwork* network);
LibPeerProtocolsMx2InstanceReference* lib_peer_protocols_mx2_instance_reference_new (guint8* verification_key,
                                                                                     gint verification_key_length1,
                                                                                     guint8* public_key,
                                                                                     gint public_key_length1);
LibPeerProtocolsMx2InstanceReference* lib_peer_protocols_mx2_instance_reference_construct (GType object_type,
                                                                                           guint8* verification_key,
                                                                                           gint verification_key_length1,
                                                                                           guint8* public_key,
                                                                                           gint public_key_length1);
LibPeerProtocolsMx2InstanceReference* lib_peer_protocols_mx2_instance_reference_new_from_stream (GInputStream* stream,
                                                                                                 GError** error);
LibPeerProtocolsMx2InstanceReference* lib_peer_protocols_mx2_instance_reference_construct_from_stream (GType object_type,
                                                                                                       GInputStream* stream,
                                                                                                       GError** error);
void lib_peer_protocols_mx2_instance_reference_serialise (LibPeerProtocolsMx2InstanceReference* self,
                                                          GOutputStream* stream,
                                                          GError** error);
GType lib_peer_util_queue_control_get_type (void) G_GNUC_CONST;
gpointer lib_peer_util_queue_command_ref (gpointer instance);
void lib_peer_util_queue_command_unref (gpointer instance);
GParamSpec* lib_peer_util_param_spec_queue_command (const gchar* name,
                                                    const gchar* nick,
                                                    const gchar* blurb,
                                                    GType object_type,
                                                    GParamFlags flags);
void lib_peer_util_value_set_queue_command (GValue* value,
                                            gpointer v_object);
void lib_peer_util_value_take_queue_command (GValue* value,
                                             gpointer v_object);
gpointer lib_peer_util_value_get_queue_command (const GValue* value);
GType lib_peer_util_queue_command_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (LibPeerUtilQueueCommand, lib_peer_util_queue_command_unref)
LibPeerUtilQueueCommand* lib_peer_util_queue_command_new (GType t_type,
                                                          GBoxedCopyFunc t_dup_func,
                                                          GDestroyNotify t_destroy_func,
                                                          LibPeerUtilQueueControl command,
                                                          gconstpointer payload);
LibPeerUtilQueueCommand* lib_peer_util_queue_command_construct (GType object_type,
                                                                GType t_type,
                                                                GBoxedCopyFunc t_dup_func,
                                                                GDestroyNotify t_destroy_func,
                                                                LibPeerUtilQueueControl command,
                                                                gconstpointer payload);
LibPeerUtilQueueCommand* lib_peer_util_queue_command_new_stop (GType t_type,
                                                               GBoxedCopyFunc t_dup_func,
                                                               GDestroyNotify t_destroy_func);
LibPeerUtilQueueCommand* lib_peer_util_queue_command_construct_stop (GType object_type,
                                                                     GType t_type,
                                                                     GBoxedCopyFunc t_dup_func,
                                                                     GDestroyNotify t_destroy_func);
LibPeerUtilQueueCommand* lib_peer_util_queue_command_new_with_payload (GType t_type,
                                                                       GBoxedCopyFunc t_dup_func,
                                                                       GDestroyNotify t_destroy_func,
                                                                       gconstpointer payload);
LibPeerUtilQueueCommand* lib_peer_util_queue_command_construct_with_payload (GType object_type,
                                                                             GType t_type,
                                                                             GBoxedCopyFunc t_dup_func,
                                                                             GDestroyNotify t_destroy_func,
                                                                             gconstpointer payload);

G_END_DECLS

#endif
