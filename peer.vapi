/* peer.vapi generated by (null), do not modify. */

namespace LibPeer {
	namespace Networks {
		namespace Simulation {
		}
		[CCode (cheader_filename = "Conduit.h")]
		public class Advertisement {
			public LibPeer.Protocols.Mx2.InstanceReference instance_reference;
			public LibPeer.Networks.PeerInfo peer_info;
			public Advertisement (LibPeer.Protocols.Mx2.InstanceReference instance_reference, LibPeer.Networks.PeerInfo peer_info);
		}
		[CCode (cheader_filename = "Conduit.h")]
		public abstract class Network {
			protected Network ();
			public abstract void advertise (LibPeer.Protocols.Mx2.InstanceReference instance_reference) throws GLib.IOError, GLib.Error;
			public abstract void bring_down () throws GLib.IOError, GLib.Error;
			public abstract void bring_up () throws GLib.IOError, GLib.Error;
			public abstract GLib.Bytes get_network_identifier ();
			public abstract void send (GLib.Bytes bytes, LibPeer.Networks.PeerInfo peer_info) throws GLib.IOError, GLib.Error;
			public signal void incoming_advertisment (LibPeer.Networks.Advertisement advertisement);
			public signal void incoming_receiption (LibPeer.Networks.Receiption receiption);
		}
		[CCode (cheader_filename = "Conduit.h")]
		public abstract class PeerInfo {
			protected PeerInfo ();
			protected abstract void build (uint8 data_length, GLib.InputStream stream) throws GLib.IOError, GLib.Error;
			public static LibPeer.Networks.PeerInfo deserialise (GLib.InputStream stream) throws GLib.IOError, GLib.Error;
			public abstract bool equals (LibPeer.Networks.PeerInfo other);
			protected abstract GLib.Bytes get_data_segment ();
			public abstract GLib.Bytes get_network_identifier ();
			public abstract uint hash ();
			public void serialise (GLib.OutputStream stream) throws GLib.IOError, GLib.Error;
			public abstract string to_string ();
		}
		[CCode (cheader_filename = "Conduit.h")]
		public class Receiption {
			public LibPeer.Networks.Network network;
			public LibPeer.Networks.PeerInfo peer_info;
			public GLib.InputStream stream;
			public Receiption (GLib.InputStream stream, LibPeer.Networks.PeerInfo info, LibPeer.Networks.Network network);
		}
		[CCode (cheader_filename = "Conduit.h")]
		public class UnknownPeerInfo : LibPeer.Networks.PeerInfo {
			public UnknownPeerInfo ();
			protected override void build (uint8 data_length, GLib.InputStream stream) throws GLib.Error;
			public override bool equals (LibPeer.Networks.PeerInfo other);
			protected override GLib.Bytes get_data_segment ();
			public override GLib.Bytes get_network_identifier ();
			public override uint hash ();
			public override string to_string ();
		}
	}
	namespace Protocols {
		namespace Mx2 {
			[CCode (cheader_filename = "Conduit.h")]
			public class InstanceReference {
				protected uint8[] public_key;
				protected uint8[] verification_key;
				public InstanceReference (uint8[] verification_key, uint8[] public_key);
				public InstanceReference.from_stream (GLib.InputStream stream) throws GLib.IOError;
				public void serialise (GLib.OutputStream stream) throws GLib.IOError;
			}
		}
	}
	namespace Util {
		[CCode (cheader_filename = "Conduit.h")]
		public class QueueCommand<T> {
			public LibPeer.Util.QueueControl command;
			public T payload;
			public QueueCommand (LibPeer.Util.QueueControl command, T payload);
			public QueueCommand.stop ();
			public QueueCommand.with_payload (T payload);
		}
		[CCode (cheader_filename = "Conduit.h")]
		public enum QueueControl {
			Payload,
			Stop
		}
	}
}
